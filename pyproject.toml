[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "hades"
version = "0.1.0"
description = "A procedurally generated bullet bullet-hell dungeon crawler made in Python."
authors = ["Aspect1103 <jack.ashwell1@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Aspect1103/Hades"
repository = "https://github.com/Aspect1103/Hades"
packages = [
    { include = "hades", from = "python_src" }
]

[tool.poetry.build]
script = "build.py"

[tool.poetry.dependencies]
python = "^3.10"
arcade = "2.6.17"
pymunk = "6.4.0"
shapely = "2.0.1"

[tool.poetry.dev-dependencies]
black = "23.3.0"
isort = "5.12.0"
mypy = "1.2.0"
nuitka = "1.5.4"
ordered-set = "4.1.0"
pre-commit = "3.2.2"
pylint = "2.17.2"
pytest = "7.3.0"
pytest-cov = "4.0.0"
pytest-icdiff = "0.6"
pytest-instafail = "0.5.0"
pytest-randomly = "3.12.0"
pytest-sugar = "0.9.6"
ruff = "0.0.261"
ssort = "v0.11.6"
tox = "4.4.11"

[tool.black]
preview = true
target_version = ["py310"]

[tool.coverage.paths]
source = [
    "python_src",
    ".tox/*/Lib/site-packages",
    ".tox/*/lib/*/site-packages",
]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",  # Exclude all type checking imports
    "pragma: no cover",  # Exclude all no cover blocks
    "raise NotImplementedError",  # Exclude all base functions
    "if __name__ == .__main__.:",  # Exclude script definitions
]
omit = [
    "*/__main__.py",  # This is only used for running the game via the CLI
    "*/extensions/compile.py",  # This is only used for building the C++ extensions
]
precision = 2
show_missing = true

[tool.coverage.run]
branch = true
source = ["hades"]

[tool.isort]
filter_files = true
profile = "black"

[tool.mypy]
# TODO: Once Arcade releases 2.7 (or a bugfix release with types), these flags
#  can be re-evaluated to get strict mypy typing
#disallow_any_explicit = true
#disallow_subclassing_any = true
#disallow_untyped_calls = true
#disallow_untyped_decorators = true
#warn_return_any = true
#warn_unused_ignores = true

check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = [
    "inventory_view.py",
]
ignore_missing_imports = true
no_implicit_reexport = true
pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_context = true
strict_concatenate = true
strict_equality = true
warn_redundant_casts = true
warn_unused_configs = true

# TODO: Once Ruff implements all of Pylint's rules, switch Pylint out for Ruff
[tool.pylint."BASIC"]
good-names = "i,j,k,x,y,a,b,dx,dy,x1,x2,y1,y2"

[tool.pylint."FORMAT"]
max-line-length = 88

[tool.pylint."MASTER"]
ignore = "TEMP-FILES"
load-plugins = [
    "pylint.extensions.bad_builtin",  # Disallow the use of deprecated builtin functions
    "pylint.extensions.check_elif",  # Disallow the use of following an else statement with an if
    "pylint.extensions.comparison_placement",  # Disallow placing the constant on the left of the comparison
    "pylint.extensions.confusing_elif",  # Disallow placing an elif after an indented block (could be hard to understand)
    "pylint.extensions.consider_ternary_expression",  # Disallow spreading multiple assignment statements across if/else blocks
    "pylint.extensions.emptystring",  # Disallow comparisons to empty strings
    "pylint.extensions.for_any_all",  # Disallow using a for loop to check for a condition and return a bool
    "pylint.extensions.set_membership",  # Disallow not using sets for membership tests
]

[tool.pylint."MESSAGES CONTROL"]
enable = "useless-suppression"
disable = [
    "attribute-defined-outside-init",  # Allow attributes being defined outside __init__ (sometimes this needs to happen)
    "import-error",  # Sometimes pylint can't import a package correctly
    "no-else-return",  # Allow else statement after a return
    "no-member",  # Allow BaseView to set the window attribute
    "no-name-in-module",  # Pylint can't infer imports from the extensions
    "redefined-outer-name",  # Allow redefining outer names (this is used in pytest)
    "too-few-public-methods",  # Stop Pylint complaining about too few public methods
    "too-many-arguments",  # Stop Pylint complaining about too many parameters
    "too-many-instance-attributes",  # Stop Pylint complaining about too many instance attributes
    "too-many-locals",  # Stop Pylint complaining about too many local variables
    "too-many-statements",  # Stop Pylint complaining about too many statements
]

[tool.pytest.ini_options]
addopts = "-vv -ra --showlocals --cov --cov-report term-missing"
testpaths = ["tests"]

[tool.ruff]
extend-exclude = [
    "*vector_field*",
    "python_src/hades/game_objects_OLD"
]
extend-ignore = [
    #"ANN101",  # Allow the `self` parameter to be untyped
    "S101",  # Allow assert statements (useful for mypy)
    "S311",  # Allow use of the random library
    "RET505",  # Stop Ruff complaining about an unnecessary else after a return statement
]
format = "grouped"
line-length = 88
select = [
    "A",  # Enable flake8-builtins
    "ANN",  # Enable flake8-annotations
    "ARG",  # Enable flake8-unused-arguments
    "B",  # Enable flake8-bugbear
    "BLE",  # Enable flake8-blind-except
    "C4",  # Enable flake8-comprehensions
    "C90",  # Enable mccabe
    "COM",  # Enable flake8-commas
    "D",  # Enable pydocstyle
    "E",  # Enable pycodestyle errors
    #"EM",  # Enable flake8-errmsg
    "ERA",  # Enable eradicate
    "F",  # Enable Pyflakes
    "FBT",  # Enable flake8-boolean-trap
    "G",  # Enable flake8-logging-format
    "ICN",  # Enable flake8-import-conventions
    "INP",  # Enable flake8-no-pep420
    "ISC",  # Enable flake8-implicit-str-concat
    "N",  # Enable pep8-naming
    "PGH",  # Enable pygrep-hooks
    "PIE",  # Enable flake8-pie
    "PLC",  # Enable Pylint convention
    "PLE",  # Enable Pylint error
    "PLR",  # Enable Pylint refactor
    "PLW",  # Enable Pylint warning
    "PT",  # Enable flake8-pytest-style
    "PTH",  # Enable flake8-use-pathlib
    "PYI",  # Enable flake8-pyi
    "RET",  # Enable flake8-return
    "RSE",  # Enable flake8-raise
    "RUF",  # Enable Ruff-specific rules
    "S",  # Enable flake8-bandit
    "SIM",  # Enable flake8-simplify
    "SLF",  # Enable flake8-self
    "T20",  # Enable flake8-print
    "TCH",  # Enable flake8-type-checking
    "TID",  # Enable flake8-tidy-imports
    "TRY",  # Enable tryceratops
    "UP",  # Enable pyupgrade
    "W",  # Enable pycodestyle warnings
]
show-fixes = true
show-source = true
src = ["python_src"]

[tool.ruff.per-file-ignores]
"build.py" = [
    "T201",  # Ignore flake8-print print rule
]
"python_src/hades/extensions/compile.py" = [
    "T201",  # Ignore flake8-print print rule
]
"cpp_src/hades_extensions.pyi" = [
    "D100",  # Ignore pydocstyle module docstring rule
    "D101",  # Ignore pydocstyle class docstring rule
    "D103",  # Ignore pydocstyle method docstring rule
    "PIE796",  # Ignore flake8-pie duplicate enum values rule
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = clean, py310, py311, report
isolated_build = true

[gh-actions]
python =
    3.10: clean, py310, report
    3.11: clean, py311, report

[testenv]
deps = pytest-cov
commands =
    python -I -m hades.extensions.compile
    pytest --cov-append

[testenv:clean]
deps = pytest-cov
commands = coverage erase

[testenv:report]
deps = pytest-cov
commands = coverage lcov
"""
